#!/usr/bin/env python3
from dat import *
def escape_ansi(line):
    ansi_escape =re.compile(r'(\x9B|\x1B\[)[0-?]*[ -\/]*[@-~]')
    return ansi_escape.sub('', line)

os.chdir('obj/1')
config = read_config()

# Get master/current/local (and make copies)
current = take_inventory(config)
local = read_inventory('.dat/local')
master = get_master(config)
olocal = local.copy()
omaster = master.copy()

# Test core functions
push = needs_push(current, local)
if sorted(push) == ['a.txt', 'c.txt', 'd.txt', 'g.txt', 'h.txt', 'j.txt', 'k.txt']:
    print(green('needs_push(): Correct!'))
else:
    print(red('needs_push(): Incorrect :-('))

pull = needs_pull(master, local)
if sorted(pull) == ['b.txt', 'c.txt', 'd.txt', 'f.txt', 'g.txt', 'h.txt', 'm.txt']:
    print(green('needs_pull(): Correct!'))
else:
    print(red('needs_pull(): Incorrect :-('))

purge = needs_purge(current, local)
if sorted(purge) == ['e.txt', 'f.txt', 'l.txt']:
    print(green('needs_purge(): Correct!'))
else:
    print(red('needs_purge(): Incorrect :-('))

kill = needs_purge(master, local)
if sorted(kill) == ['i.txt', 'j.txt', 'l.txt']:
    print(green('needs_kill(): Correct!'))
else:
    print(red('needs_kill(): Incorrect :-('))

# Test conflicts
[push_conflict, push_resolved] = resolve_push_conflicts(current, local, master, push)
master = omaster.copy()
local = olocal.copy()
if sorted(push_conflict) == ['c.txt', 'h.txt']:
    print(green('push_conflict: Correct!'))
else:
    print(red('push_conflict: Incorrect :-('))

if sorted(push_resolved) == ['d.txt', 'g.txt']:
    print(green('push_resolved: Correct!'))
else:
    print(red('push_resolved: Incorrect :-('))

[purge_conflict, purge_resolved] = resolve_purge_conflicts(master, local, purge)
master = omaster.copy()
local = olocal.copy()
if sorted(purge_conflict) == ['f.txt']:
    print(green('purge_conflict: Correct!'))
else:
    print(red('purge_conflict: Incorrect :-('))

if sorted(purge_resolved) == ['l.txt']:
    print(green('purge_resolved: Correct!'))
else:
    print(red('purge_resolved: Incorrect :-('))

[pull_conflict, pull_resolved] = resolve_pull_conflicts(current, local, master, pull)
local = olocal.copy()
if sorted(pull_conflict) == ['c.txt', 'f.txt', 'h.txt']:
    print(green('pull_conflict: Correct!'))
else:
    print(red('pull_conflict: Incorrect :-('))

if sorted(pull_resolved) == ['d.txt', 'g.txt']:
    print(green('pull_resolved: Correct!'))
else:
    print(red('pull_resolved: Incorrect :-('))

[kill_conflict, kill_resolved] = resolve_kill_conflicts(current, local, kill)
local = olocal.copy()
if sorted(kill_conflict) == ['j.txt']:
    print(green('kill_conflict: Correct!'))
else:
    print(red('kill_conflict: Incorrect :-('))

if sorted(kill_resolved) == ['l.txt']:
    print(green('kill_resolved: Correct!'))
else:
    print(red('kill_resolved: Incorrect :-('))

# pull test
message = subprocess.run('dat -d pull', shell=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE).stdout.decode()
target = '''Unable to pull the following files: conflict with current\n  c.txt\n  f.txt\n  h.txt\n  j.txt\naws s3 sync s3://pbreheny.dropbox.bin.tests.dat . --delete --exclude "*" --include "b.txt" --include "i.txt" --include "m.txt" --profile personal\nResolved: [\'d.txt\', \'g.txt\', \'l.txt\']\n'''
if escape_ansi(message) == target:
    print(green('dat_pull(): Correct!'))
else:
    print(red('dat_pull(): Inorrect :-('))
    print('Should have: (b,i,m) pulled, (d,g,l) resolved, (c,f,h,j) conflict. Instead we have')
    print(message)

# push test
message = subprocess.run('dat -d push', shell=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE).stdout.decode()
target = '''Unable to push the following files: conflict with master\nc.txt\nf.txt\nh.txt\naws s3 sync --no-follow-symlinks . s3://pbreheny.dropbox.bin.tests.dat --delete --exclude "*" --include .dat/master --include "a.txt" --include "e.txt" --include "j.txt" --include "k.txt" --profile personal\nResolved: [\'d.txt\', \'g.txt\', \'l.txt\']\n'''
if escape_ansi(message) == target:
    print(green('dat_push(): Correct!'))
else:
    print(red('dat_push(): Inorrect :-('))
    print('Should have: (a,e,j,k) pulled, (g,l) resolved, (c,f,h) conflict. Instead we have')
    print(message)

# status test
message = subprocess.run('dat -r status', shell=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE).stdout.decode()
target = '''Local/remote conflicts in the following files:\n  c.txt\n  f.txt\n  h.txt\nModified remotely: \n  b.txt\n  m.txt\nModified locally: \n  a.txt\n  k.txt\nDeleted remotely: \n  i.txt\nDeleted locally: \n  e.txt\nDeleted remotely but modified locally (can be pushed, but should it?): \n  j.txt\n'''
if escape_ansi(message) == target:
    print(green('dat_status(): Correct!'))
else:
    print(red('dat_status(): Inorrect :-('))
    print('Should have:\n  (c,f,h) conflicts\n  (b,m) modified remotely\n  (a,k) modified locally\n  (i) deleted remotely\n  (e) deleted locally\n  (j) special: modified locally and deleted remotely, but not a conflict.\n\nInstead we have:\n')
    print(message)

# restore
shutil.copy('../local.txt', '.dat/local')
